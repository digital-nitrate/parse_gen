/token floatdcl 1
/token intdcl 2
/token assign 3
/token plus 4
/token minus 5
/token print 6
/token <double> num 7
/token <char const*> id 8

/nterm <struct conn> Prog
/nterm <struct conn> Dcls
/nterm <struct conn> Dcl
/nterm <struct conn> Stmts
/nterm <struct conn> Stmt
/nterm <struct conn> ExprTail
/nterm <struct conn> Val

/start Prog

/parseparam <struct node*> out
/parseparam <struct node const**> stream
/lexparam <struct node const**> stream

/coderequires /{
	#include <stddef.h>
	struct conn {
		struct node* sub;
		size_t sub_cnt;
	};
/}

/code /{
	#include <stdlib.h>
	enum {
		Prog = 9,
		Dcls = 10,
		Dcl = 11,
		Stmts = 12,
		Stmt = 13,
		ExprTail = 14,
		Val = 15,
	};
	struct node {
		YYSTYPE data;
		int type;
	};
	static void yyerror(char const* msg, struct node* out, struct node const** stream);
	static int yyparse(struct node* out, struct node const** stream);
	static int yylex(YYSTYPE* yyvalp, struct node const** stream);
/}

%%

Prog:
	Dcls Stmts /{
		$0.sub = malloc((sizeof *($0.sub)) * 2);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 2;
		$0.sub[0].type = Dcls;
		$0.sub[0].data.Dcls = $1;
		$0.sub[1].type = Stmts;
		$0.sub[1].data.Stmts = $2;
		out->type = Prog;
		out->data.Prog = $0;
	/}
	;

Dcls:
	Dcl Dcls /{
		$0.sub = malloc((sizeof *($0.sub)) * 2);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 2;
		$0.sub[0].type = Dcl;
		$0.sub[0].data.Dcl = $1;
		$0.sub[1].type = Dcls;
		$0.sub[1].data.Dcls = $2;
	/}
	| /empty /{
		$0.sub = NULL;
		$0.sub_cnt = 0;
	/}
	;

Dcl:
	floatdcl id /{
		$0.sub = malloc((sizeof *($0.sub)) * 2);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 2;
		$0.sub[0].type = floatdcl;
		$0.sub[1].type = id;
		$0.sub[1].data.id = $2;
	/}
	| intdcl id /{
		$0.sub = malloc((sizeof *($0.sub)) * 2);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 2;
		$0.sub[0].type = intdcl;
		$0.sub[1].type = id;
		$0.sub[1].data.id = $2;
	/}
	;

Stmts:
	Stmt Stmts
	| /empty
	;

Stmt:
	id assign Val ExprTail /{
		$0.sub = malloc((sizeof *($0.sub)) * 4);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 4;
		$0.sub[0].type = id;
		$0.sub[0].data.id = $1;
		$0.sub[1].type = assign;
		$0.sub[2].type = Val;
		$0.sub[2].data.Val = $3;
		$0.sub[3].type = ExprTail;
		$0.sub[3].data.ExprTail = $4;
	/}
	| print id /{
		$0.sub = malloc((sizeof *($0.sub)) * 2);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 2;
		$0.sub[0].type = print;
		$0.sub[1].type = id;
		$0.sub[1].data.id = $2;
	/}
	;

ExprTail:
	plus Val ExprTail /{
		$0.sub = malloc((sizeof *($0.sub)) * 3);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 3;
		$0.sub[0].type = plus;
		$0.sub[1].type = Val;
		$0.sub[1].data.Val = $2;
		$0.sub[2].type = ExprTail;
		$0.sub[2].data.ExprTail = $3;
	/}
	| minus Val ExprTail /{
		$0.sub = malloc((sizeof *($0.sub)) * 3);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 3;
		$0.sub[0].type = minus;
		$0.sub[1].type = Val;
		$0.sub[1].data.Val = $2;
		$0.sub[2].type = ExprTail;
		$0.sub[2].data.ExprTail = $3;
	/}
	| /empty /{
		$0.sub = NULL;
		$0.sub_cnt = 0;
	/}
	;

Val:
	id /{
		$0.sub = malloc((sizeof *($0.sub)));
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 1;
		$0.sub[0].type = id;
		$0.sub[0].data.id = $1;
	/}
	| num /{
		$0.sub = malloc((sizeof *($0.sub)));
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 1;
		$0.sub[0].type = num;
		$0.sub[0].data.num = $1;
	/}
	;

%%

#include <stdio.h>

int yylex(YYSTYPE* yylvalp, struct node const** stream) {
	*yylvalp = (*stream)->data;
	int type = (*stream)->type;
	*stream += 1;
	return type;
}

static struct node const csm[] = {
	{.type=floatdcl},
	{.type=id,.data.id="x"},
	{.type=intdcl},
	{.type=id,.data.id="y"},
	{.type=id,.data.id="x"},
	{.type=assign},
	{.type=num,.data.num=3.14159},
	{.type=id,.data.id="y"},
	{.type=assign},
	{.type=num,.data.num=-23.},
	{.type=id,.data.id="v"},
	{.type=assign},
	{.type=id,.data.id="oops_I_dont_exist"},
	{.type=id,.data.id="z"},
	{.type=assign},
	{.type=id,.data.id="x"},
	{.type=plus},
	{.type=id,.data.id="y"},
	{.type=minus},
	{.type=num,.data.num=45},
	{.type=plus},
	{.type=id,.data.id="z"},
	{.type=minus},
	{.type=num,.data.num=100},
	{.type=id,.data.id="iz_lots_of"},
	{.type=assign},
	{.type=id,.data.id="semantic_errors"},
	{.type=id,.data.id="semantic_errors"},
	{.type=assign},
	{.type=num,.data.num=1},
	{.type=plus},
	{.type=num,.data.num=1},
	{.type=print},
	{.type=id,.data.id="semantic_errors"},
	{.type=YYEOF}
};

void yyerror(char const* msg, struct node* out, struct node const** stream) {
	(void)out;
	(void)stream;
	fprintf(stderr, "%s\n", msg);
}

int main(void) {
	struct node top;
	struct node const* sptr = csm;
	int res = yyparse(&top, &sptr);
	return res;
}
