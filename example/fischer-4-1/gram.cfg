/token lparen 1
/token rparen 2
/token <int> v 3
/token <char const*> f 4
/token plus 5

/nterm <struct conn> S
/nterm <struct conn> E
/nterm <struct conn> PREFIX
/nterm <struct conn> TAIL

/start S

/parseparam <struct node*> out
/parseparam <struct node const**> stream
/lexparam <struct node const**> stream

/coderequires /{
	#include <stddef.h>
	struct conn {
		struct node* sub;
		size_t sub_cnt;
	};
/}

/code /{
	#include <stdlib.h>
	enum {
		S = 6,
		E = 7,
		PREFIX = 8,
		TAIL = 9,
	};
	struct node {
		YYSTYPE data;
		int type;
	};
	static void yyerror(char const* msg, struct node* out, struct node const** stream);
	static int yyparse(struct node* out, struct node const** stream);
	static int yylex(YYSTYPE* yyvalp, struct node const** stream);
/}

%%

S:
	E /{
		$0.sub = malloc((sizeof *($0.sub)));
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 1;
		$0.sub[0].type = E;
		$0.sub[0].data.E = $1;
		out->type = S;
		out->data.S = $0;
	/}
	;

E:
	PREFIX lparen E rparen /{
		$0.sub = malloc((sizeof *($0.sub)) * 4);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 4;
		$0.sub[0].type = PREFIX;
		$0.sub[0].data.PREFIX = $1;
		$0.sub[1].type = lparen;
		$0.sub[2].type = E;
		$0.sub[2].data.E = $3;
		$0.sub[3].type = rparen;
	/}
	| v TAIL /{
		$0.sub = malloc((sizeof *($0.sub)) * 2);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 2;
		$0.sub[0].type = v;
		$0.sub[0].data.v = $1;
		$0.sub[1].type = TAIL;
		$0.sub[1].data.TAIL = $2;
	/}
	;

PREFIX:
	f /{
		$0.sub = malloc((sizeof *($0.sub)));
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 1;
		$0.sub[0].type = f;
		$0.sub[0].data.f = $1;
	/}
	| /empty /{
		$0.sub = NULL;
		$0.sub_cnt = 0;
	/}
	;

TAIL:
	plus E /{
		$0.sub = malloc((sizeof *($0.sub)) * 2);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 2;
		$0.sub[0].type = plus;
		$0.sub[1].type = E;
		$0.sub[1].data.E = $2;
	/}
	| /empty /{
		$0.sub = NULL;
		$0.sub_cnt = 0;
	/}
	;

%%

#include <stdio.h>

int yylex(YYSTYPE* yylvalp, struct node const** stream) {
	*yylvalp = (*stream)->data;
	int type = (*stream)->type;
	*stream += 1;
	return type;
}

static struct node const csm[] = {
	{.type=f,.data.f="sin"},
	{.type=lparen},
	{.type=f,.data.f="cos"},
	{.type=lparen},
	{.type=v,.data.v=3},
	{.type=plus},
	{.type=v,.data.v=4},
	{.type=rparen},
	{.type=plus},
	{.type=f,.data.f="tan"},
	{.type=lparen},
	{.type=v,.data.v=0},
	{.type=plus},
	{.type=v,.data.v=2},
	{.type=plus},
	{.type=v,.data.v=4},
	{.type=rparen},
	{.type=YYEOF}
};

void yyerror(char const* msg, struct node* out, struct node const** stream) {
	(void)out;
	(void)stream;
	fprintf(stderr, "%s\n", msg);
}

int main(void) {
	struct node top;
	struct node const* sptr = csm;
	int res = yyparse(&top, &sptr);
	return res;
}
