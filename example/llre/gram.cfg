/token open 1
/token close 2
/token pipe 3
/token kleene 4
/token plus 5
/token dash 6
/token dot 7
/token <char> chara 8

/nterm <struct conn> RE
/nterm <struct conn> ALT
/nterm <struct conn> ALTLIST
/nterm <struct conn> SEQ
/nterm <struct conn> SEQLIST
/nterm <struct conn> ATOM
/nterm <struct conn> ATOMMOD
/nterm <struct conn> NUCLEUS
/nterm <struct conn> CHARRNG

/start RE

/parseparam <struct node*> out
/parseparam <struct node const**> stream
/lexparam <struct node const**> stream

/coderequires /{
	#include <stddef.h>
	struct conn {
		struct node* sub;
		size_t sub_cnt;
	};
/}

/code /{
	#include <stdlib.h>
	enum {
		RE = 9,
		ALT = 10,
		ALTLIST = 11,
		SEQ = 12,
		SEQLIST = 13,
		ATOM = 14,
		ATOMMOD = 15,
		NUCLEUS = 16,
		CHARRNG = 17,
	};
	struct node {
		YYSTYPE data;
		int type;
	};
	static void yyerror(char const* msg, struct node* out, struct node const** stream);
	static int yyparse(struct node* out, struct node const** stream);
	static int yylex(YYSTYPE* yyvalp, struct node const** stream);
/}

%%

RE:
	ALT /{
		$0.sub = malloc((sizeof *($0.sub)));
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 1;
		$0.sub[0].type = ALT;
		$0.sub[0].data.ALT = $1;
		out->type = RE;
		out->data.RE = $0;
	/}
	;

ALT:
	SEQ ALTLIST /{
		$0.sub = malloc((sizeof *($0.sub)) * 2);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 2;
		$0.sub[0].type = SEQ;
		$0.sub[0].data.SEQ = $1;
		$0.sub[1].type = ALTLIST;
		$0.sub[1].data.ALTLIST = $2;
	/}
	;

ALTLIST:
	pipe SEQ ALTLIST /{
		$0.sub = malloc((sizeof *($0.sub)) * 3);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 3;
		$0.sub[0].type = pipe;
		$0.sub[1].type = SEQ;
		$0.sub[1].data.SEQ = $2;
		$0.sub[2].type = ALTLIST;
		$0.sub[2].data.ALTLIST = $3;
	/}
	| /empty /{
		$0.sub = NULL;
		$0.sub_cnt = 0;
	/}
	;

SEQ:
	ATOM SEQLIST /{
		$0.sub = malloc((sizeof *($0.sub)) * 2);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 2;
		$0.sub[0].type = ATOM;
		$0.sub[0].data.ATOM = $1;
		$0.sub[1].type = SEQLIST;
		$0.sub[1].data.SEQLIST = $2;
	/}
	| /empty /{
		$0.sub = NULL;
		$0.sub_cnt = 0;
	/}
	;

SEQLIST:
	ATOM SEQLIST /{
		$0.sub = malloc((sizeof *($0.sub)) * 2);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 2;
		$0.sub[0].type = ATOM;
		$0.sub[0].data.ATOM = $1;
		$0.sub[1].type = SEQLIST;
		$0.sub[1].data.SEQLIST = $2;
	/}
	| /empty /{
		$0.sub = NULL;
		$0.sub_cnt = 0;
	/}
	;

ATOM:
	NUCLEUS ATOMMOD /{
		$0.sub = malloc((sizeof *($0.sub)) * 2);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 2;
		$0.sub[0].type = NUCLEUS;
		$0.sub[0].data.NUCLEUS = $1;
		$0.sub[1].type = ATOMMOD;
		$0.sub[1].data.ATOMMOD = $2;
	/}
	;

ATOMMOD:
	kleene /{
		$0.sub = malloc((sizeof *($0.sub)));
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 1;
		$0.sub[0].type = kleene;
	/}
	| plus /{
		$0.sub = malloc((sizeof *($0.sub)));
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 1;
		$0.sub[0].type = plus;
	/}
	| /empty /{
		$0.sub = NULL;
		$0.sub_cnt = 0;
	/}
	;

NUCLEUS:
	open ALT close /{
		$0.sub = malloc((sizeof *($0.sub)) * 3);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 3;
		$0.sub[0].type = open;
		$0.sub[1].type = ALT;
		$0.sub[1].data.ALT = $2;
		$0.sub[2].type = close;
	/}
	| chara CHARRNG /{
		$0.sub = malloc((sizeof *($0.sub)) * 2);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 2;
		$0.sub[0].type = chara;
		$0.sub[0].data.chara = $1;
		$0.sub[1].type = CHARRNG;
		$0.sub[1].data.CHARRNG = $2;
	/}
	| dot /{
		$0.sub = malloc((sizeof *($0.sub)));
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 1;
		$0.sub[0].type = dot;
	/}
	;

CHARRNG:
	dash chara /{
		$0.sub = malloc((sizeof *($0.sub)) * 2);
		if ($0.sub == NULL) exit(1);
		$0.sub_cnt = 2;
		$0.sub[0].type = dash;
		$0.sub[1].type = chara;
		$0.sub[1].data.chara = $2;
	/}
	| /empty /{
		$0.sub = NULL;
		$0.sub_cnt = 0;
	/}
	;

%%

#include <stdio.h>

int yylex(YYSTYPE* yylvalp, struct node const** stream) {
	*yylvalp = (*stream)->data;
	int type = (*stream)->type;
	*stream += 1;
	return type;
}

static struct node const csm1[] = {
	{.type=chara,.data.chara='A'},
	{.type=chara,.data.chara='b'},
	{.type=open},
	{.type=chara,.data.chara='c'},
	{.type=chara,.data.chara='d'},
	{.type=dash},
	{.type=chara,.data.chara='e'},
	{.type=plus},
	{.type=close},
	{.type=kleene},
	{.type=open},
	{.type=dot},
	{.type=pipe},
	{.type=chara,.data.chara='0'},
	{.type=chara,.data.chara='1'},
	{.type=chara,.data.chara='2'},
	{.type=close},
	{.type=chara,.data.chara='3'},
	{.type=YYEOF}
};

static struct node const csm2[] = {
	{.type=chara,.data.chara='('},
	{.type=chara,.data.chara='p'},
	{.type=chara,.data.chara='a'},
	{.type=chara,.data.chara='r'},
	{.type=chara,.data.chara='e'},
	{.type=chara,.data.chara='n'},
	{.type=open},
	{.type=chara,.data.chara='t'},
	{.type=chara,.data.chara='h'},
	{.type=chara,.data.chara='e'},
	{.type=chara,.data.chara='t'},
	{.type=chara,.data.chara='i'},
	{.type=chara,.data.chara='c'},
	{.type=chara,.data.chara='a'},
	{.type=chara,.data.chara='l'},
	{.type=pipe},
	{.type=close},
	{.type=chara,.data.chara='-'},
	{.type=chara,.data.chara='a'},
	{.type=chara,.data.chara='l'},
	{.type=chara,.data.chara='l'},
	{.type=chara,.data.chara='y'},
	{.type=chara,.data.chara=')'},
	{.type=chara,.data.chara=' '},
	{.type=chara,.data.chara='c'},
	{.type=chara,.data.chara='o'},
	{.type=chara,.data.chara='r'},
	{.type=chara,.data.chara='r'},
	{.type=chara,.data.chara='e'},
	{.type=chara,.data.chara='c'},
	{.type=chara,.data.chara='t'},
	{.type=chara,.data.chara='!'},
	{.type=chara,.data.chara='\n'},
	{.type=YYEOF}
};

void yyerror(char const* msg, struct node* out, struct node const** stream) {
	(void)out;
	(void)stream;
	fprintf(stderr, "%s\n", msg);
}

int main(void) {
	struct node top;
	struct node const* sptr = csm1;
	yyparse(&top, &sptr);
	sptr = csm2;
	yyparse(&top, &sptr);
	return 0;
}
