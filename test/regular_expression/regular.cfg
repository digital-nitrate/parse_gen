%{
#include <stdlib.h>
#include "regular.h"
%}

%param <reg*> out
%param <void*> scanner

%token pipe 1
%token kleene 2
%token plus 3
%token open 4
%token close 5
%token <char> chara 6
%token dot 7
%token dash 8

%nterm RE
%nterm <reg> ALT
%nterm <struct reg_link*> ALTLIST
%nterm <reg> SEQ
%nterm <struct reg_link*> SEQLIST
%nterm <reg> ATOM
%nterm <enum atommod_type> ATOMMOD
%nterm <reg> NUCLEUS
%nterm <struct charrng> CHARRNG

%start RE

%%

RE:
	ALT %{*out = $1;%}
	;

ALT:
	SEQ ALTLIST %{
		if ($2 == NULL) {
			$$ = $1;
		} else {
			struct reg_link* top = malloc(sizeof *top);
			top->next = $2;
			top->sub = $1;
			$$.type = REG_ALT;
			$$.alt = top;
		}
	%}
	;

ALTLIST:
	pipe SEQ ALTLIST %{
		struct reg_link* top = malloc(sizeof *top);
		top->next = $3;
		top->sub = $2;
		$$ = top;
	%}
	| %{$$ = NULL;%}
	;

SEQ:
	ATOM SEQLIST %{
		if ($2 == NULL) {
			$$ = $1;
		} else {
			struct reg_link* top = malloc(sizeof *top);
			top->next = $2;
			top->sub = $1;
			$$.type = REG_SEQ;
			$$.seq = top;
		}
	%}
	| %{$$.type = REG_LAMBDA;%}
	;

SEQLIST:
	ATOM SEQLIST %{
		struct reg_link* top = malloc(sizeof *top);
		top->next = $2;
		top->sub = $1;
		$$ = top;
	%}
	| %{$$ = NULL;%}
	;

ATOM:
	NUCLEUS ATOMMOD %{
		switch ($2) {
			case MOD_NONE:
				$$ = $1;
				break;
			case MOD_PLUS: {
				reg* top = malloc(sizeof *top);
				*top = $1;
				$$.type = REG_PLUS;
				$$.plus = top;
				break;
			}
			case MOD_KLEENE: {
				reg* top = malloc(sizeof *top);
				*top = $1;
				$$.type = REG_KLEENE;
				$$.kleene = top;
				break;
			}
		}
	%}
	;

ATOMMOD:
	kleene %{$$ = MOD_KLEENE;%}
	| plus %{$$ = MOD_PLUS;%}
	| %{$$ = MOD_NONE;%}
	;

NUCLEUS:
	open ALT close %{$$ = $2;%}
	| chara CHARRNG %{
		switch ($2.type) {
			case RNG_NONE:
				$$.type = REG_CHAR;
				$$.c = $1;
				break;
			case RNG_TOP:
				$$.type = REG_RANGE;
				$$.c1 = $1;
				$$.c2 = $2.top;
				break;
		}
	%}
	| dot %{$$.type = REG_DOT;%}
	;

CHARRNG:
	dash chara %{
		$$.type = RNG_TOP;
		$$.top = $2;
	%}
	| %{$$.type = RNG_NONE;%}
	;

%%

extern int yylex(YYSTYPE* lvalp, reg* out, void* scanner);
